function newlut=createlutfile(par)% we take the calibration data and fit a polynomial to the data.% this also allows us to expand the LUT file to stepsize 1.newdac=0:par.maxdac;  % one entry for each dac value%filename=[filesep par.outdir filesep par.outfile '.cal' ];%[dac, lut(:,1), lut(:,2), lut(:,3), lut(:,4)]=textread(filename, '%f\t%f\t%f\t%f\t%f', 'headerlines', 1 );for i=1:par.guns	[p,s] = polyfit(par.olddac,par.cal(i,:),par.polyorder);	newlut(i,:)=polyval(p, newdac);endif 0	[n,m]=size(newlut);		% correct for any unwanted increases (at low dac values)	for c=1:n		for r=m-1:-1:1			if newlut(c,r+1) < newlut(c,r) | newlut(c,r) < par.cal(c,1)				% replace data by linearly extrapolating between previous value and first measured value				newlut(c,1:r+1)=linspace(par.cal(c,1), newlut(c,r+1), r+1);					break;			end		end	endend% save the new lut data% filename=[filesep lutfiledir filesep lutfilename '.lut' ];fp=fopen( par.lutfilename, 'w');[n,m]=size(newlut);fprintf(fp, 'DAC\tRED\tGREEN\tBLUE\tWHITE\n');for r=1:m	fprintf(fp,'%d', newdac(r));	for c=1:n		fprintf(fp,'\t%f', newlut(c,r));	end	fprintf(fp,'\n');endfclose(fp);filetype(par.lutfilename,'TEXT','XCEL');